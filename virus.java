import java.util.*;
import java.io.*;

/* 문제 2606
   <문제>
   	신종 바이러스인 웜 바이러스는 네트워크를 통해 전파된다. 한 컴퓨터가 웜 바이러스에 걸리면 그 컴퓨터와 네트워크 상에서 연결되어 있는 모든 컴퓨터는 웜 바이러스에 걸리게 된다.
	예를 들어 7대의 컴퓨터가 <그림 1>과 같이 네트워크 상에서 연결되어 있다고 하자. 
	1번 컴퓨터가 웜 바이러스에 걸리면 웜 바이러스는 2번과 5번 컴퓨터를 거쳐 3번과 6번 컴퓨터까지 전파되어 2, 3, 5, 6 네 대의 컴퓨터는 웜 바이러스에 걸리게 된다. 
	하지만 4번과 7번 컴퓨터는 1번 컴퓨터와 네트워크상에서 연결되어 있지 않기 때문에 영향을 받지 않는다.
	어느 날 1번 컴퓨터가 웜 바이러스에 걸렸다. 컴퓨터의 수와 네트워크 상에서 서로 연결되어 있는 정보가 주어질 때, 
	1번 컴퓨터를 통해 웜 바이러스에 걸리게 되는 컴퓨터의 수를 출력하는 프로그램을 작성하시오.
   <입력>
   	첫째 줄에는 컴퓨터의 수가 주어진다. 컴퓨터의 수는 100 이하이고 각 컴퓨터에는 1번 부터 차례대로 번호가 매겨진다. 
   	둘째 줄에는 네트워크 상에서 직접 연결되어 있는 컴퓨터 쌍의 수가 주어진다. 
   	이어서 그 수만큼 한 줄에 한 쌍씩 네트워크 상에서 직접 연결되어 있는 컴퓨터의 번호 쌍이 주어진다.
   <출력>
   	1번 컴퓨터가 웜 바이러스에 걸렸을 때, 1번 컴퓨터를 통해 웜 바이러스에 걸리게 되는 컴퓨터의 수를 첫째 줄에 출력한다.
   
*/
public class virus {

	static class CPU {
		private int V; // 노드의 개수
		private LinkedList<Integer> adj[]; // 인접 리스트
		private boolean visited[];
		
		CPU(int v) {
			this.V = v;
			this.adj = new LinkedList[v];
			this.visited = new boolean[V];

			for (int i = 0; i < v; ++i) // 인접 리스트 초기화
				adj[i] = new LinkedList();
		}
		
		void addEdge(int v, int w) {
			adj[v].add(w);
		}
		
		void initVisited(int v) {
			for (int i = 0; i < v; i++) {
				visited[i] = false;
			}
		}
		
		void BFS(int s) {
			LinkedList<Integer> queue = new LinkedList<Integer>();
			this.initVisited(this.V);
			int count = -1;

			visited[s] = true;
			queue.add(s);

			while (queue.size() != 0) {
				s = queue.poll();
				//System.out.print(s + 1 + " ");
				count++;

				Iterator<Integer> i = adj[s].listIterator();
				while (i.hasNext()) {
					int n = i.next();

					if (!visited[n]) {
						visited[n] = true;
						queue.add(n);
					}
				}
			}
			System.out.println(count);
		}
		
	}
	
	static int cpuNumber;
	static int lineCount;
	static int start = 1;
	
	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		cpuNumber = Integer.parseInt(st.nextToken());
		
		st = new StringTokenizer(br.readLine());
		lineCount = Integer.parseInt(st.nextToken());
		
		CPU cpu = new CPU(cpuNumber);
		for(int i = 0; i< lineCount; i++) {
			st = new StringTokenizer(br.readLine());

			int v = Integer.parseInt(st.nextToken());
			int w = Integer.parseInt(st.nextToken());
			
			cpu.addEdge(v - 1, w - 1);
			cpu.addEdge(w - 1, v - 1);
		}
		cpu.BFS(start - 1);
	}

}
